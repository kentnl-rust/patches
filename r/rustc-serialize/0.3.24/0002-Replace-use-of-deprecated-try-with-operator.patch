From a9e3ace04bf4de8a83e2a33e28ad4ef585cf5c8d Mon Sep 17 00:00:00 2001
From: Kent Fredric <kentnl@gentoo.org>
Date: Tue, 26 Nov 2019 05:28:02 +1300
Subject: Replace use of deprecated "try!()" with "?" operator.

---
 src/collection_impls.rs |  32 ++++----
 src/json.rs             | 164 ++++++++++++++++++++--------------------
 src/serialize.rs        |  50 ++++++------
 3 files changed, 123 insertions(+), 123 deletions(-)

diff --git a/src/collection_impls.rs b/src/collection_impls.rs
index f8074c9..cbc6e23 100644
--- a/src/collection_impls.rs
+++ b/src/collection_impls.rs
@@ -21,7 +21,7 @@ impl<
     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {
         s.emit_seq(self.len(), |s| {
             for (i, e) in self.iter().enumerate() {
-                try!(s.emit_seq_elt(i, |s| e.encode(s)));
+                s.emit_seq_elt(i, |s| e.encode(s))?;
             }
             Ok(())
         })
@@ -33,7 +33,7 @@ impl<T:Decodable> Decodable for LinkedList<T> {
         d.read_seq(|d, len| {
             let mut list = LinkedList::new();
             for i in 0..len {
-                list.push_back(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));
+                list.push_back(d.read_seq_elt(i, |d| Decodable::decode(d))?);
             }
             Ok(list)
         })
@@ -44,7 +44,7 @@ impl<T: Encodable> Encodable for VecDeque<T> {
     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {
         s.emit_seq(self.len(), |s| {
             for (i, e) in self.iter().enumerate() {
-                try!(s.emit_seq_elt(i, |s| e.encode(s)));
+                s.emit_seq_elt(i, |s| e.encode(s))?;
             }
             Ok(())
         })
@@ -56,7 +56,7 @@ impl<T:Decodable> Decodable for VecDeque<T> {
         d.read_seq(|d, len| {
             let mut deque: VecDeque<T> = VecDeque::new();
             for i in 0..len {
-                deque.push_back(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));
+                deque.push_back(d.read_seq_elt(i, |d| Decodable::decode(d))?);
             }
             Ok(deque)
         })
@@ -71,8 +71,8 @@ impl<
         e.emit_map(self.len(), |e| {
             let mut i = 0;
             for (key, val) in self.iter() {
-                try!(e.emit_map_elt_key(i, |e| key.encode(e)));
-                try!(e.emit_map_elt_val(i, |e| val.encode(e)));
+                e.emit_map_elt_key(i, |e| key.encode(e))?;
+                e.emit_map_elt_val(i, |e| val.encode(e))?;
                 i += 1;
             }
             Ok(())
@@ -88,8 +88,8 @@ impl<
         d.read_map(|d, len| {
             let mut map = BTreeMap::new();
             for i in 0..len {
-                let key = try!(d.read_map_elt_key(i, |d| Decodable::decode(d)));
-                let val = try!(d.read_map_elt_val(i, |d| Decodable::decode(d)));
+                let key = d.read_map_elt_key(i, |d| Decodable::decode(d))?;
+                let val = d.read_map_elt_val(i, |d| Decodable::decode(d))?;
                 map.insert(key, val);
             }
             Ok(map)
@@ -104,7 +104,7 @@ impl<
         s.emit_seq(self.len(), |s| {
             let mut i = 0;
             for e in self.iter() {
-                try!(s.emit_seq_elt(i, |s| e.encode(s)));
+                s.emit_seq_elt(i, |s| e.encode(s))?;
                 i += 1;
             }
             Ok(())
@@ -119,7 +119,7 @@ impl<
         d.read_seq(|d, len| {
             let mut set = BTreeSet::new();
             for i in 0..len {
-                set.insert(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));
+                set.insert(d.read_seq_elt(i, |d| Decodable::decode(d))?);
             }
             Ok(set)
         })
@@ -134,8 +134,8 @@ impl<K, V> Encodable for HashMap<K, V>
         e.emit_map(self.len(), |e| {
             let mut i = 0;
             for (key, val) in self.iter() {
-                try!(e.emit_map_elt_key(i, |e| key.encode(e)));
-                try!(e.emit_map_elt_val(i, |e| val.encode(e)));
+                e.emit_map_elt_key(i, |e| key.encode(e))?;
+                e.emit_map_elt_val(i, |e| val.encode(e))?;
                 i += 1;
             }
             Ok(())
@@ -151,8 +151,8 @@ impl<K, V> Decodable for HashMap<K, V>
         d.read_map(|d, len| {
             let mut map = HashMap::with_capacity(cap_capacity::<(K, V)>(len));
             for i in 0..len {
-                let key = try!(d.read_map_elt_key(i, |d| Decodable::decode(d)));
-                let val = try!(d.read_map_elt_val(i, |d| Decodable::decode(d)));
+                let key = d.read_map_elt_key(i, |d| Decodable::decode(d))?;
+                let val = d.read_map_elt_val(i, |d| Decodable::decode(d))?;
                 map.insert(key, val);
             }
             Ok(map)
@@ -165,7 +165,7 @@ impl<T> Encodable for HashSet<T> where T: Encodable + Hash + Eq {
         s.emit_seq(self.len(), |s| {
             let mut i = 0;
             for e in self.iter() {
-                try!(s.emit_seq_elt(i, |s| e.encode(s)));
+                s.emit_seq_elt(i, |s| e.encode(s))?;
                 i += 1;
             }
             Ok(())
@@ -178,7 +178,7 @@ impl<T> Decodable for HashSet<T> where T: Decodable + Hash + Eq, {
         d.read_seq(|d, len| {
             let mut set = HashSet::with_capacity(cap_capacity::<T>(len));
             for i in 0..len {
-                set.insert(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));
+                set.insert(d.read_seq_elt(i, |d| Decodable::decode(d))?);
             }
             Ok(set)
         })
diff --git a/src/json.rs b/src/json.rs
index 3b02e33..f106a20 100644
--- a/src/json.rs
+++ b/src/json.rs
@@ -391,7 +391,7 @@ pub fn encode<T: ::Encodable>(object: &T) -> EncodeResult<string::String> {
     let mut s = String::new();
     {
         let mut encoder = Encoder::new(&mut s);
-        try!(object.encode(&mut encoder));
+        object.encode(&mut encoder)?;
     }
     Ok(s)
 }
@@ -458,7 +458,7 @@ pub type EncodeResult<T> = Result<T, EncoderError>;
 pub type DecodeResult<T> = Result<T, DecoderError>;
 
 fn escape_str(wr: &mut fmt::Write, v: &str) -> EncodeResult<()> {
-    try!(wr.write_str("\""));
+    wr.write_str("\"")?;
 
     let mut start = 0;
 
@@ -503,19 +503,19 @@ fn escape_str(wr: &mut fmt::Write, v: &str) -> EncodeResult<()> {
         };
 
         if start < i {
-            try!(wr.write_str(&v[start..i]));
+            wr.write_str(&v[start..i])?;
         }
 
-        try!(wr.write_str(escaped));
+        wr.write_str(escaped)?;
 
         start = i + 1;
     }
 
     if start != v.len() {
-        try!(wr.write_str(&v[start..]));
+        wr.write_str(&v[start..])?;
     }
 
-    try!(wr.write_str("\""));
+    wr.write_str("\"")?;
     Ok(())
 }
 
@@ -531,12 +531,12 @@ fn spaces(wr: &mut fmt::Write, n: u32) -> EncodeResult<()> {
     const BUF: &'static str = "                ";
 
     while n >= BUF.len() {
-        try!(wr.write_str(BUF));
+        wr.write_str(BUF)?;
         n -= BUF.len();
     }
 
     if n > 0 {
-        try!(wr.write_str(&BUF[..n]));
+        wr.write_str(&BUF[..n])?;
     }
     Ok(())
 }
@@ -556,10 +556,10 @@ fn fmt_number_or_null(v: f64) -> string::String {
 macro_rules! emit_enquoted_if_mapkey {
     ($enc:ident,$e:expr) => {
         if $enc.is_emitting_map_key {
-            try!(write!($enc.writer, "\"{}\"", $e));
+            write!($enc.writer, "\"{}\"", $e)?;
             Ok(())
         } else {
-            try!(write!($enc.writer, "{}", $e));
+            write!($enc.writer, "{}", $e)?;
             Ok(())
         }
     }
@@ -624,7 +624,7 @@ impl<'a> ::Encoder for Encoder<'a> {
 
     fn emit_nil(&mut self) -> EncodeResult<()> {
         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }
-        try!(write!(self.writer, "null"));
+        write!(self.writer, "null")?;
         Ok(())
     }
 
@@ -643,9 +643,9 @@ impl<'a> ::Encoder for Encoder<'a> {
     fn emit_bool(&mut self, v: bool) -> EncodeResult<()> {
         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }
         if v {
-            try!(write!(self.writer, "true"));
+            write!(self.writer, "true")?;
         } else {
-            try!(write!(self.writer, "false"));
+            write!(self.writer, "false")?;
         }
         Ok(())
     }
@@ -686,31 +686,31 @@ impl<'a> ::Encoder for Encoder<'a> {
         } else {
             if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }
             if let EncodingFormat::Pretty{ref mut curr_indent, indent} = self.format {
-                try!(write!(self.writer, "{{\n"));
+                write!(self.writer, "{{\n")?;
                 *curr_indent += indent;
-                try!(spaces(self.writer, *curr_indent));
-                try!(write!(self.writer, "\"variant\": "));
-                try!(escape_str(self.writer, name));
-                try!(write!(self.writer, ",\n"));
-                try!(spaces(self.writer, *curr_indent));
-                try!(write!(self.writer, "\"fields\": [\n"));
+                spaces(self.writer, *curr_indent)?;
+                write!(self.writer, "\"variant\": ")?;
+                escape_str(self.writer, name)?;
+                write!(self.writer, ",\n")?;
+                spaces(self.writer, *curr_indent)?;
+                write!(self.writer, "\"fields\": [\n")?;
                 *curr_indent += indent;
             } else {
-                try!(write!(self.writer, "{{\"variant\":"));
-                try!(escape_str(self.writer, name));
-                try!(write!(self.writer, ",\"fields\":["));
+                write!(self.writer, "{{\"variant\":")?;
+                escape_str(self.writer, name)?;
+                write!(self.writer, ",\"fields\":[")?;
             }
-            try!(f(self));
+            f(self)?;
             if let EncodingFormat::Pretty{ref mut curr_indent, indent} = self.format {
                 *curr_indent -= indent;
-                try!(write!(self.writer, "\n"));
-                try!(spaces(self.writer, *curr_indent));
+                write!(self.writer, "\n")?;
+                spaces(self.writer, *curr_indent)?;
                 *curr_indent -= indent;
-                try!(write!(self.writer, "]\n"));
-                try!(spaces(self.writer, *curr_indent));
-                try!(write!(self.writer, "}}"));
+                write!(self.writer, "]\n")?;
+                spaces(self.writer, *curr_indent)?;
+                write!(self.writer, "}}")?;
             } else {
-                try!(write!(self.writer, "]}}"));
+                write!(self.writer, "]}}")?;
             }
             Ok(())
         }
@@ -721,13 +721,13 @@ impl<'a> ::Encoder for Encoder<'a> {
     {
         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }
         if idx != 0 {
-            try!(write!(self.writer, ","));
+            write!(self.writer, ",")?;
             if let EncodingFormat::Pretty{..} = self.format {
-                try!(write!(self.writer, "\n"));
+                write!(self.writer, "\n")?;
             }
         }
         if let EncodingFormat::Pretty{curr_indent, ..} = self.format {
-            try!(spaces(self.writer, curr_indent));
+            spaces(self.writer, curr_indent)?;
         }
         f(self)
     }
@@ -759,19 +759,19 @@ impl<'a> ::Encoder for Encoder<'a> {
     {
         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }
         if len == 0 {
-            try!(write!(self.writer, "{{}}"));
+            write!(self.writer, "{{}}")?;
         } else {
-            try!(write!(self.writer, "{{"));
+            write!(self.writer, "{{")?;
             if let EncodingFormat::Pretty{ref mut curr_indent, indent} = self.format {
                 *curr_indent += indent;
             }
-            try!(f(self));
+            f(self)?;
             if let EncodingFormat::Pretty{ref mut curr_indent, indent} = self.format {
                 *curr_indent -= indent;
-                try!(write!(self.writer, "\n"));
-                try!(spaces(self.writer, *curr_indent));
+                write!(self.writer, "\n")?;
+                spaces(self.writer, *curr_indent)?;
             }
-            try!(write!(self.writer, "}}"));
+            write!(self.writer, "}}")?;
         }
         Ok(())
     }
@@ -781,17 +781,17 @@ impl<'a> ::Encoder for Encoder<'a> {
     {
         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }
         if idx != 0 {
-            try!(write!(self.writer, ","));
+            write!(self.writer, ",")?;
         }
         if let EncodingFormat::Pretty{curr_indent, ..} = self.format {
-            try!(write!(self.writer, "\n"));
-            try!(spaces(self.writer, curr_indent));
+            write!(self.writer, "\n")?;
+            spaces(self.writer, curr_indent)?;
         }
-        try!(escape_str(self.writer, name));
+        escape_str(self.writer, name)?;
         if let EncodingFormat::Pretty{..} = self.format {
-            try!(write!(self.writer, ": "));
+            write!(self.writer, ": ")?;
         } else {
-            try!(write!(self.writer, ":"));
+            write!(self.writer, ":")?;
         }
         f(self)
     }
@@ -844,19 +844,19 @@ impl<'a> ::Encoder for Encoder<'a> {
     {
         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }
         if len == 0 {
-            try!(write!(self.writer, "[]"));
+            write!(self.writer, "[]")?;
         } else {
-            try!(write!(self.writer, "["));
+            write!(self.writer, "[")?;
             if let EncodingFormat::Pretty{ref mut curr_indent, indent} = self.format {
                 *curr_indent += indent;
             }
-            try!(f(self));
+            f(self)?;
             if let EncodingFormat::Pretty{ref mut curr_indent, indent} = self.format {
                 *curr_indent -= indent;
-                try!(write!(self.writer, "\n"));
-                try!(spaces(self.writer, *curr_indent));
+                write!(self.writer, "\n")?;
+                spaces(self.writer, *curr_indent)?;
             }
-            try!(write!(self.writer, "]"));
+            write!(self.writer, "]")?;
         }
         Ok(())
     }
@@ -866,11 +866,11 @@ impl<'a> ::Encoder for Encoder<'a> {
     {
         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }
         if idx != 0 {
-            try!(write!(self.writer, ","));
+            write!(self.writer, ",")?;
         }
         if let EncodingFormat::Pretty{ref mut curr_indent, ..} = self.format {
-            try!(write!(self.writer, "\n"));
-            try!(spaces(self.writer, *curr_indent));
+            write!(self.writer, "\n")?;
+            spaces(self.writer, *curr_indent)?;
         }
         f(self)
     }
@@ -880,19 +880,19 @@ impl<'a> ::Encoder for Encoder<'a> {
     {
         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }
         if len == 0 {
-            try!(write!(self.writer, "{{}}"));
+            write!(self.writer, "{{}}")?;
         } else {
-            try!(write!(self.writer, "{{"));
+            write!(self.writer, "{{")?;
             if let EncodingFormat::Pretty{ref mut curr_indent, indent} = self.format {
                 *curr_indent += indent;
             }
-            try!(f(self));
+            f(self)?;
             if let EncodingFormat::Pretty{ref mut curr_indent, indent} = self.format {
                 *curr_indent -= indent;
-                try!(write!(self.writer, "\n"));
-                try!(spaces(self.writer, *curr_indent));
+                write!(self.writer, "\n")?;
+                spaces(self.writer, *curr_indent)?;
             }
-            try!(write!(self.writer, "}}"));
+            write!(self.writer, "}}")?;
         }
         Ok(())
     }
@@ -902,14 +902,14 @@ impl<'a> ::Encoder for Encoder<'a> {
     {
         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }
         if idx != 0 {
-            try!(write!(self.writer, ","));
+            write!(self.writer, ",")?;
         }
         if let EncodingFormat::Pretty{curr_indent, ..} = self.format {
-            try!(write!(self.writer, "\n"));
-            try!(spaces(self.writer, curr_indent));
+            write!(self.writer, "\n")?;
+            spaces(self.writer, curr_indent)?;
         }
         self.is_emitting_map_key = true;
-        try!(f(self));
+        f(self)?;
         self.is_emitting_map_key = false;
         Ok(())
     }
@@ -919,9 +919,9 @@ impl<'a> ::Encoder for Encoder<'a> {
     {
         if self.is_emitting_map_key { return Err(EncoderError::BadHashmapKey); }
         if let EncodingFormat::Pretty{..} = self.format {
-            try!(write!(self.writer, ": "));
+            write!(self.writer, ": ")?;
         } else {
-            try!(write!(self.writer, ":"));
+            write!(self.writer, ":")?;
         }
         f(self)
     }
@@ -959,7 +959,7 @@ impl Json {
     pub fn from_reader(rdr: &mut io::Read) -> Result<Self, BuilderError> {
         let contents = {
             let mut c = Vec::new();
-            try!(rdr.read_to_end(&mut c));
+            rdr.read_to_end(&mut c)?;
             c
         };
         let s = match str::from_utf8(&contents).ok() {
@@ -1676,7 +1676,7 @@ impl<T: Iterator<Item = char>> Parser<T> {
                     'n' => res.push('\n'),
                     'r' => res.push('\r'),
                     't' => res.push('\t'),
-                    'u' => match try!(self.decode_hex_escape()) {
+                    'u' => match self.decode_hex_escape()? {
                         0xDC00 ..= 0xDFFF => {
                             return self.error(LoneLeadingSurrogateInHexEscape)
                         }
@@ -1689,7 +1689,7 @@ impl<T: Iterator<Item = char>> Parser<T> {
                                 _ => return self.error(UnexpectedEndOfHexEscape),
                             }
 
-                            let n2 = try!(self.decode_hex_escape());
+                            let n2 = self.decode_hex_escape()?;
                             if n2 < 0xDC00 || n2 > 0xDFFF {
                                 return self.error(LoneLeadingSurrogateInHexEscape)
                             }
@@ -2060,14 +2060,14 @@ impl Decoder {
 
 macro_rules! expect {
     ($e:expr, Null) => ({
-        match try!($e) {
+        match $e? {
             Json::Null => Ok(()),
             other => Err(ExpectedError("Null".to_string(),
                                        format!("{}", other)))
         }
     });
     ($e:expr, $t:ident) => ({
-        match try!($e) {
+        match $e? {
             Json::$t(v) => Ok(v),
             other => {
                 Err(ExpectedError(stringify!($t).to_string(),
@@ -2081,7 +2081,7 @@ macro_rules! read_primitive {
     ($name:ident, $ty:ident) => {
         #[allow(unused_comparisons)]
         fn $name(&mut self) -> DecodeResult<$ty> {
-            match try!(self.pop()) {
+            match self.pop()? {
                 Json::I64(i) => {
                     let other = i as $ty;
                     if i == other as i64 && (other > 0) == (i > 0) {
@@ -2138,7 +2138,7 @@ impl ::Decoder for Decoder {
     }
 
     fn read_f64(&mut self) -> DecodeResult<f64> {
-        match try!(self.pop()) {
+        match self.pop()? {
             Json::I64(f) => Ok(f as f64),
             Json::U64(f) => Ok(f as f64),
             Json::F64(f) => Ok(f),
@@ -2160,7 +2160,7 @@ impl ::Decoder for Decoder {
     }
 
     fn read_char(&mut self) -> DecodeResult<char> {
-        let s = try!(self.read_str());
+        let s = self.read_str()?;
         {
             let mut it = s.chars();
             match (it.next(), it.next()) {
@@ -2186,7 +2186,7 @@ impl ::Decoder for Decoder {
                                mut f: F) -> DecodeResult<T>
         where F: FnMut(&mut Decoder, usize) -> DecodeResult<T>,
     {
-        let name = match try!(self.pop()) {
+        let name = match self.pop()? {
             Json::String(s) => s,
             Json::Object(mut o) => {
                 let n = match o.remove(&"variant".to_string()) {
@@ -2250,8 +2250,8 @@ impl ::Decoder for Decoder {
     fn read_struct<T, F>(&mut self, _name: &str, _len: usize, f: F) -> DecodeResult<T> where
         F: FnOnce(&mut Decoder) -> DecodeResult<T>,
     {
-        let value = try!(f(self));
-        try!(self.pop());
+        let value = f(self)?;
+        self.pop()?;
         Ok(value)
     }
 
@@ -2262,7 +2262,7 @@ impl ::Decoder for Decoder {
                                -> DecodeResult<T> where
         F: FnOnce(&mut Decoder) -> DecodeResult<T>,
     {
-        let mut obj = try!(expect!(self.pop(), Object));
+        let mut obj = expect!(self.pop(), Object)?;
 
         let value = match obj.remove(&name.to_string()) {
             None => {
@@ -2276,7 +2276,7 @@ impl ::Decoder for Decoder {
             },
             Some(json) => {
                 self.stack.push(json);
-                try!(f(self))
+                f(self)?
             }
         };
         self.stack.push(Json::Object(obj));
@@ -2323,7 +2323,7 @@ impl ::Decoder for Decoder {
     fn read_option<T, F>(&mut self, mut f: F) -> DecodeResult<T> where
         F: FnMut(&mut Decoder, bool) -> DecodeResult<T>,
     {
-        match try!(self.pop()) {
+        match self.pop()? {
             Json::Null => f(self, false),
             value => { self.stack.push(value); f(self, true) }
         }
@@ -2332,7 +2332,7 @@ impl ::Decoder for Decoder {
     fn read_seq<T, F>(&mut self, f: F) -> DecodeResult<T> where
         F: FnOnce(&mut Decoder, usize) -> DecodeResult<T>,
     {
-        let array = try!(expect!(self.pop(), Array));
+        let array = expect!(self.pop(), Array)?;
         let len = array.len();
         for v in array.into_iter().rev() {
             self.stack.push(v);
@@ -2349,7 +2349,7 @@ impl ::Decoder for Decoder {
     fn read_map<T, F>(&mut self, f: F) -> DecodeResult<T> where
         F: FnOnce(&mut Decoder, usize) -> DecodeResult<T>,
     {
-        let obj = try!(expect!(self.pop(), Object));
+        let obj = expect!(self.pop(), Object)?;
         let len = obj.len();
         for (key, value) in obj.into_iter() {
             self.stack.push(value);
diff --git a/src/serialize.rs b/src/serialize.rs
index 296f3d4..9c6b08a 100644
--- a/src/serialize.rs
+++ b/src/serialize.rs
@@ -1116,13 +1116,13 @@ impl<T: ?Sized + Encodable> Encodable for Box<T> {
 
 impl< T: Decodable> Decodable for Box<T> {
     fn decode<D: Decoder>(d: &mut D) -> Result<Box<T>, D::Error> {
-        Ok(Box::new(try!(Decodable::decode(d))))
+        Ok(Box::new(Decodable::decode(d)?))
     }
 }
 
 impl< T: Decodable> Decodable for Box<[T]> {
     fn decode<D: Decoder>(d: &mut D) -> Result<Box<[T]>, D::Error> {
-        let v: Vec<T> = try!(Decodable::decode(d));
+        let v: Vec<T> = Decodable::decode(d)?;
         Ok(v.into_boxed_slice())
     }
 }
@@ -1137,7 +1137,7 @@ impl<T:Encodable> Encodable for Rc<T> {
 impl<T:Decodable> Decodable for Rc<T> {
     #[inline]
     fn decode<D: Decoder>(d: &mut D) -> Result<Rc<T>, D::Error> {
-        Ok(Rc::new(try!(Decodable::decode(d))))
+        Ok(Rc::new(Decodable::decode(d)?))
     }
 }
 
@@ -1153,7 +1153,7 @@ impl<'a, T: ?Sized> Decodable for Cow<'a, T>
 {
     #[inline]
     fn decode<D: Decoder>(d: &mut D) -> Result<Cow<'static, T>, D::Error> {
-        Ok(Cow::Owned(try!(Decodable::decode(d))))
+        Ok(Cow::Owned(Decodable::decode(d)?))
     }
 }
 
@@ -1161,7 +1161,7 @@ impl<T:Encodable> Encodable for [T] {
     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {
         s.emit_seq(self.len(), |s| {
             for (i, e) in self.iter().enumerate() {
-                try!(s.emit_seq_elt(i, |s| e.encode(s)))
+                s.emit_seq_elt(i, |s| e.encode(s))?
             }
             Ok(())
         })
@@ -1172,7 +1172,7 @@ impl<T:Encodable> Encodable for Vec<T> {
     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {
         s.emit_seq(self.len(), |s| {
             for (i, e) in self.iter().enumerate() {
-                try!(s.emit_seq_elt(i, |s| e.encode(s)))
+                s.emit_seq_elt(i, |s| e.encode(s))?
             }
             Ok(())
         })
@@ -1184,7 +1184,7 @@ impl<T:Decodable> Decodable for Vec<T> {
         d.read_seq(|d, len| {
             let mut v = Vec::with_capacity(cap_capacity::<T>(len));
             for i in 0..len {
-                v.push(try!(d.read_seq_elt(i, |d| Decodable::decode(d))));
+                v.push(d.read_seq_elt(i, |d| Decodable::decode(d))?);
             }
             Ok(v)
         })
@@ -1206,7 +1206,7 @@ impl<T:Decodable> Decodable for Option<T> {
     fn decode<D: Decoder>(d: &mut D) -> Result<Option<T>, D::Error> {
         d.read_option(|d, b| {
             if b {
-                Ok(Some(try!(Decodable::decode(d))))
+                Ok(Some(Decodable::decode(d)?))
             } else {
                 Ok(None)
             }
@@ -1220,17 +1220,17 @@ impl<T:Encodable, E:Encodable> Encodable for Result<T, E> {
             match *self {
                 Ok(ref v) => {
                     s.emit_enum_variant("Ok", 0, 1, |s| {
-                        try!(s.emit_enum_variant_arg(0, |s| {
+                        s.emit_enum_variant_arg(0, |s| {
                             v.encode(s)
-                        }));
+                        })?;
                         Ok(())
                     })
                 }
                 Err(ref v) => {
                     s.emit_enum_variant("Err", 1, 1, |s| {
-                        try!(s.emit_enum_variant_arg(0, |s| {
+                        s.emit_enum_variant_arg(0, |s| {
                             v.encode(s)
-                        }));
+                        })?;
                         Ok(())
                     })
                 }
@@ -1292,10 +1292,10 @@ macro_rules! tuple {
                 let len: usize = count_idents!($($name,)*);
                 d.read_tuple(len, |d| {
                     let mut i = 0;
-                    let ret = ($(try!(d.read_tuple_arg({ i+=1; i-1 },
+                    let ret = ($(d.read_tuple_arg({ i+=1; i-1 },
                                                        |d| -> Result<$name,D::Error> {
                         Decodable::decode(d)
-                    })),)*);
+                    })?,)*);
                     return Ok(ret);
                 })
             }
@@ -1308,7 +1308,7 @@ macro_rules! tuple {
                 $(let $name = $name; n += 1;)*
                 s.emit_tuple(n, |s| {
                     let mut i = 0;
-                    $(try!(s.emit_tuple_arg({ i+=1; i-1 }, |s| $name.encode(s)));)*
+                    $(s.emit_tuple_arg({ i+=1; i-1 }, |s| $name.encode(s))?;)*
                     Ok(())
                 })
             }
@@ -1329,8 +1329,8 @@ macro_rules! array {
                         return Err(d.error("wrong array length"));
                     }
                     Ok([$(
-                        try!(d.read_seq_elt($len - $idx - 1,
-                                            |d| Decodable::decode(d)))
+                        d.read_seq_elt($len - $idx - 1,
+                                            |d| Decodable::decode(d))?
                     ),*])
                 })
             }
@@ -1340,7 +1340,7 @@ macro_rules! array {
             fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {
                 s.emit_seq($len, |s| {
                     for i in 0..$len {
-                        try!(s.emit_seq_elt(i, |s| self[i].encode(s)));
+                        s.emit_seq_elt(i, |s| self[i].encode(s))?;
                     }
                     Ok(())
                 })
@@ -1391,7 +1391,7 @@ impl Decodable for path::PathBuf {
     #[cfg(unix)]
     fn decode<D: Decoder>(d: &mut D) -> Result<path::PathBuf, D::Error> {
         use std::os::unix::prelude::*;
-        let bytes: Vec<u8> = try!(Decodable::decode(d));
+        let bytes: Vec<u8> = Decodable::decode(d)?;
         let s: OsString = OsStringExt::from_vec(bytes);
         let mut p = path::PathBuf::new();
         p.push(s);
@@ -1416,7 +1416,7 @@ impl<T: Encodable + Copy> Encodable for Cell<T> {
 
 impl<T: Decodable + Copy> Decodable for Cell<T> {
     fn decode<D: Decoder>(d: &mut D) -> Result<Cell<T>, D::Error> {
-        Ok(Cell::new(try!(Decodable::decode(d))))
+        Ok(Cell::new(Decodable::decode(d)?))
     }
 }
 
@@ -1433,7 +1433,7 @@ impl<T: Encodable> Encodable for RefCell<T> {
 
 impl<T: Decodable> Decodable for RefCell<T> {
     fn decode<D: Decoder>(d: &mut D) -> Result<RefCell<T>, D::Error> {
-        Ok(RefCell::new(try!(Decodable::decode(d))))
+        Ok(RefCell::new(Decodable::decode(d)?))
     }
 }
 
@@ -1445,7 +1445,7 @@ impl<T:Encodable> Encodable for Arc<T> {
 
 impl<T:Decodable+Send+Sync> Decodable for Arc<T> {
     fn decode<D: Decoder>(d: &mut D) -> Result<Arc<T>, D::Error> {
-        Ok(Arc::new(try!(Decodable::decode(d))))
+        Ok(Arc::new(Decodable::decode(d)?))
     }
 }
 
@@ -1498,9 +1498,9 @@ impl<S:Encoder> EncoderHelpers for S {
     {
         self.emit_seq(v.len(), |this| {
             for (i, e) in v.iter().enumerate() {
-                try!(this.emit_seq_elt(i, |this| {
+                this.emit_seq_elt(i, |this| {
                     f(this, e)
-                }));
+                })?;
             }
             Ok(())
         })
@@ -1554,7 +1554,7 @@ impl<D: Decoder> DecoderHelpers for D {
         self.read_seq(|this, len| {
             let mut v = Vec::with_capacity(cap_capacity::<T>(len));
             for i in 0..len {
-                v.push(try!(this.read_seq_elt(i, |this| f(this))));
+                v.push(this.read_seq_elt(i, |this| f(this))?);
             }
             Ok(v)
         })
-- 
2.24.0

