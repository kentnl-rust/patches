From 9b2d4ad9ffbd5d886b95b9f05bf31c0fdd322205 Mon Sep 17 00:00:00 2001
From: Kent Fredric <kentnl@gentoo.org>
Date: Tue, 26 Nov 2019 05:00:18 +1300
Subject: Stop using deprecated inclusive elipsis

---
 src/hex.rs  |  6 +++---
 src/json.rs | 26 +++++++++++++-------------
 src/lib.rs  |  1 +
 3 files changed, 17 insertions(+), 16 deletions(-)

diff --git a/src/hex.rs b/src/hex.rs
index 3c7df19..a26b8a3 100644
--- a/src/hex.rs
+++ b/src/hex.rs
@@ -134,9 +134,9 @@ impl FromHex for str {
             buf <<= 4;
 
             match byte {
-                b'A'...b'F' => buf |= byte - b'A' + 10,
-                b'a'...b'f' => buf |= byte - b'a' + 10,
-                b'0'...b'9' => buf |= byte - b'0',
+                b'A'..=b'F' => buf |= byte - b'A' + 10,
+                b'a'..=b'f' => buf |= byte - b'a' + 10,
+                b'0'..=b'9' => buf |= byte - b'0',
                 b' '|b'\r'|b'\n'|b'\t' => {
                     buf >>= 4;
                     continue
diff --git a/src/json.rs b/src/json.rs
index e478fe8..3b02e33 100644
--- a/src/json.rs
+++ b/src/json.rs
@@ -1540,14 +1540,14 @@ impl<T: Iterator<Item = char>> Parser<T> {
 
                 // A leading '0' must be the only digit before the decimal point.
                 match self.ch_or_null() {
-                    '0' ... '9' => return self.error(InvalidNumber),
+                    '0' ..= '9' => return self.error(InvalidNumber),
                     _ => ()
                 }
             },
-            '1' ... '9' => {
+            '1' ..= '9' => {
                 while !self.eof() {
                     match self.ch_or_null() {
-                        c @ '0' ... '9' => {
+                        c @ '0' ..= '9' => {
                             macro_rules! try_or_invalid {
                                 ($e: expr) => {
                                     match $e {
@@ -1576,7 +1576,7 @@ impl<T: Iterator<Item = char>> Parser<T> {
 
         // Make sure a digit follows the decimal place.
         match self.ch_or_null() {
-            '0' ... '9' => (),
+            '0' ..= '9' => (),
              _ => return self.error(InvalidNumber)
         }
 
@@ -1584,7 +1584,7 @@ impl<T: Iterator<Item = char>> Parser<T> {
         let mut frac = 0.0;
         while !self.eof() {
             match self.ch_or_null() {
-                c @ '0' ... '9' => {
+                c @ '0' ..= '9' => {
                     dec /= 10.0;
                     frac += (((c as isize) - ('0' as isize)) as f64) * dec;
                     self.bump();
@@ -1613,12 +1613,12 @@ impl<T: Iterator<Item = char>> Parser<T> {
 
         // Make sure a digit follows the exponent place.
         match self.ch_or_null() {
-            '0' ... '9' => (),
+            '0' ..= '9' => (),
             _ => return self.error(InvalidNumber)
         }
         while !self.eof() {
             match self.ch_or_null() {
-                c @ '0' ... '9' => {
+                c @ '0' ..= '9' => {
                     exp *= 10;
                     exp += (c as usize) - ('0' as usize);
 
@@ -1644,9 +1644,9 @@ impl<T: Iterator<Item = char>> Parser<T> {
         while i < 4 {
             self.bump();
             n = match self.ch_or_null() {
-                c @ '0' ... '9' => n * 16 + ((c as u16) - ('0' as u16)),
-                c @ 'a' ... 'f' => n * 16 + (10 + (c as u16) - ('a' as u16)),
-                c @ 'A' ... 'F' => n * 16 + (10 + (c as u16) - ('A' as u16)),
+                c @ '0' ..= '9' => n * 16 + ((c as u16) - ('0' as u16)),
+                c @ 'a' ..= 'f' => n * 16 + (10 + (c as u16) - ('a' as u16)),
+                c @ 'A' ..= 'F' => n * 16 + (10 + (c as u16) - ('A' as u16)),
                 _ => return self.error(InvalidEscape)
             };
 
@@ -1677,13 +1677,13 @@ impl<T: Iterator<Item = char>> Parser<T> {
                     'r' => res.push('\r'),
                     't' => res.push('\t'),
                     'u' => match try!(self.decode_hex_escape()) {
-                        0xDC00 ... 0xDFFF => {
+                        0xDC00 ..= 0xDFFF => {
                             return self.error(LoneLeadingSurrogateInHexEscape)
                         }
 
                         // Non-BMP characters are encoded as a sequence of
                         // two hex escapes, representing UTF-16 surrogates.
-                        n1 @ 0xD800 ... 0xDBFF => {
+                        n1 @ 0xD800 ..= 0xDBFF => {
                             match (self.next_char(), self.next_char()) {
                                 (Some('\\'), Some('u')) => (),
                                 _ => return self.error(UnexpectedEndOfHexEscape),
@@ -1913,7 +1913,7 @@ impl<T: Iterator<Item = char>> Parser<T> {
             'n' => { self.parse_ident("ull", NullValue) }
             't' => { self.parse_ident("rue", BooleanValue(true)) }
             'f' => { self.parse_ident("alse", BooleanValue(false)) }
-            '0' ... '9' | '-' => self.parse_number(),
+            '0' ..= '9' | '-' => self.parse_number(),
             '"' => match self.parse_str() {
                 Ok(s) => StringValue(s),
                 Err(e) => Error(e),
diff --git a/src/lib.rs b/src/lib.rs
index 8b0fb22..5110f05 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -41,6 +41,7 @@
        html_favicon_url = "https://www.rust-lang.org/favicon.ico",
        html_root_url = "https://doc.rust-lang.org/rustc-serialize/")]
 #![cfg_attr(test, deny(warnings))]
+#![deny(ellipsis_inclusive_range_patterns)]
 #![allow(trivial_numeric_casts)]
 #![cfg_attr(rust_build, feature(staged_api))]
 #![cfg_attr(rust_build, staged_api)]
-- 
2.24.0

