From e10f3486a018437c88b4dd5278fcbe11e0a8c90b Mon Sep 17 00:00:00 2001
From: Kent Fredric <kentnl@gentoo.org>
Date: Mon, 16 Mar 2020 08:50:04 +1300
Subject: futures: tests/stream_into_async_read.rs: Don't break w/o "std"

- Symbols/Imports pushed down / localised
- Tests gated with cfg()
- Tests now build and pass with all valid feature combinations

See previous commits for details and rationale
---
 tests/stream_into_async_read.rs | 98 ++++++++++++++++++---------------
 1 file changed, 53 insertions(+), 45 deletions(-)

diff --git a/tests/stream_into_async_read.rs b/tests/stream_into_async_read.rs
index c528af0..1b26233 100644
--- a/tests/stream_into_async_read.rs
+++ b/tests/stream_into_async_read.rs
@@ -1,51 +1,32 @@
-use core::pin::Pin;
-use futures::io::{AsyncRead, AsyncBufRead};
-use futures::stream::{self, TryStreamExt};
-use futures::task::Poll;
-use futures_test::{task::noop_context, stream::StreamTestExt};
-
-macro_rules! assert_read {
-    ($reader:expr, $buf:expr, $item:expr) => {
-        let mut cx = noop_context();
-        loop {
-            match Pin::new(&mut $reader).poll_read(&mut cx, $buf) {
-                Poll::Ready(Ok(x)) => {
-                    assert_eq!(x, $item);
-                    break;
-                }
-                Poll::Ready(Err(err)) => {
-                    panic!("assertion failed: expected value but got {}", err);
-                }
-                Poll::Pending => {
-                    continue;
-                }
-            }
-        }
-    };
-}
-
-macro_rules! assert_fill_buf {
-    ($reader:expr, $buf:expr) => {
-        let mut cx = noop_context();
-        loop {
-            match Pin::new(&mut $reader).poll_fill_buf(&mut cx) {
-                Poll::Ready(Ok(x)) => {
-                    assert_eq!(x, $buf);
-                    break;
-                }
-                Poll::Ready(Err(err)) => {
-                    panic!("assertion failed: expected value but got {}", err);
-                }
-                Poll::Pending => {
-                    continue;
+#[cfg(feature = "std")] // io::
+#[test]
+fn test_into_async_read() {
+    use core::pin::Pin;
+    use futures::io::AsyncRead;
+    use futures::stream::{self, TryStreamExt};
+    use futures::task::Poll;
+    use futures_test::{task::noop_context, stream::StreamTestExt};
+
+    macro_rules! assert_read {
+        ($reader:expr, $buf:expr, $item:expr) => {
+            let mut cx = noop_context();
+            loop {
+                match Pin::new(&mut $reader).poll_read(&mut cx, $buf) {
+                    Poll::Ready(Ok(x)) => {
+                        assert_eq!(x, $item);
+                        break;
+                    }
+                    Poll::Ready(Err(err)) => {
+                        panic!("assertion failed: expected value but got {}", err);
+                    }
+                    Poll::Pending => {
+                        continue;
+                    }
                 }
             }
-        }
-    };
-}
+        };
+    }
 
-#[test]
-fn test_into_async_read() {
     let stream = stream::iter((1..=3).flat_map(|_| vec![Ok(vec![]), Ok(vec![1, 2, 3, 4, 5])]));
     let mut reader = stream.interleave_pending().into_async_read();
     let mut buf = vec![0; 3];
@@ -71,8 +52,35 @@ fn test_into_async_read() {
     assert_read!(reader, &mut buf, 0);
 }
 
+#[cfg(feature = "std")] // io::
 #[test]
 fn test_into_async_bufread() -> std::io::Result<()> {
+    use core::pin::Pin;
+    use futures::io::AsyncBufRead;
+    use futures::stream::{self, TryStreamExt};
+    use futures::task::Poll;
+    use futures_test::{task::noop_context, stream::StreamTestExt};
+
+    macro_rules! assert_fill_buf {
+        ($reader:expr, $buf:expr) => {
+            let mut cx = noop_context();
+            loop {
+                match Pin::new(&mut $reader).poll_fill_buf(&mut cx) {
+                    Poll::Ready(Ok(x)) => {
+                        assert_eq!(x, $buf);
+                        break;
+                    }
+                    Poll::Ready(Err(err)) => {
+                        panic!("assertion failed: expected value but got {}", err);
+                    }
+                    Poll::Pending => {
+                        continue;
+                    }
+                }
+            }
+        };
+    }
+
     let stream = stream::iter((1..=2).flat_map(|_| vec![Ok(vec![]), Ok(vec![1, 2, 3, 4, 5])]));
     let mut reader = stream.interleave_pending().into_async_read();
 
-- 
2.25.0

