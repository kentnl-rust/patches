From 7969746e04739736b13cca6c064d3ffd87ddb200 Mon Sep 17 00:00:00 2001
From: Kent Fredric <kentnl@gentoo.org>
Date: Sun, 15 Mar 2020 23:45:34 +1300
Subject: futures: tests/io_lines.rs : Avoid compile failures w/o features

Tests in this file require either "executor" or "std" features.

Imports and test related symbols pushed to deep isolation to simplify
owership and test gating.

Tests are gated as appropriate with `#[cfg()]`

Tests now compile and pass (where relevant) with:

  cargo hack --each-feature \
    --skip bilock \
    --skip cfg-target-has-atomic \
    --skip read-initializer \
    test --test io_lines

  cargo hack --feature-powerset \
    --skip bilock \
    --skip cfg-target-has-atomic \
    --skip read-initializer \
    test --test io_lines

  cargo hack --features "unstable" \
    --each-feature \
    --skip "unstable" \
    test --test io_lines

  cargo hack --features "unstable" \
    --feature-powerset \
    --skip "unstable" \
    test --test io_lines
---
 tests/io_lines.rs | 67 ++++++++++++++++++++++++++++-------------------
 1 file changed, 40 insertions(+), 27 deletions(-)

diff --git a/tests/io_lines.rs b/tests/io_lines.rs
index 39eafa9..e10edd0 100644
--- a/tests/io_lines.rs
+++ b/tests/io_lines.rs
@@ -1,19 +1,34 @@
-use futures::executor::block_on;
-use futures::future::{Future, FutureExt};
-use futures::stream::{self, StreamExt, TryStreamExt};
-use futures::io::{AsyncBufReadExt, Cursor};
-use futures::task::Poll;
-use futures_test::io::AsyncReadTestExt;
-use futures_test::task::noop_context;
-
-macro_rules! block_on_next {
-    ($expr:expr) => {
-        block_on($expr.next()).unwrap().unwrap()
-    };
+#[cfg(any(feature = "std", feature = "executor"))]
+mod util {
+    use futures::future::Future;
+
+    pub fn run<F: Future + Unpin>(mut f: F) -> F::Output {
+        use futures_test::task::noop_context;
+        use futures::task::Poll;
+        use futures::future::FutureExt;
+
+        let mut cx = noop_context();
+        loop {
+            if let Poll::Ready(x) = f.poll_unpin(&mut cx) {
+                return x;
+            }
+        }
+    }
 }
 
+#[cfg(feature = "executor")]
 #[test]
 fn lines() {
+    use futures::executor::block_on;
+    use futures::stream::StreamExt;
+    use futures::io::{AsyncBufReadExt, Cursor};
+
+    macro_rules! block_on_next {
+        ($expr:expr) => {
+            block_on($expr.next()).unwrap().unwrap()
+        };
+    }
+
     let buf = Cursor::new(&b"12\r"[..]);
     let mut s = buf.lines();
     assert_eq!(block_on_next!(s), "12\r".to_string());
@@ -26,23 +41,21 @@ fn lines() {
     assert!(block_on(s.next()).is_none());
 }
 
-fn run<F: Future + Unpin>(mut f: F) -> F::Output {
-    let mut cx = noop_context();
-    loop {
-        if let Poll::Ready(x) = f.poll_unpin(&mut cx) {
-            return x;
-        }
-    }
-}
-
-macro_rules! run_next {
-    ($expr:expr) => {
-        run($expr.next()).unwrap().unwrap()
-    };
-}
-
+#[cfg(feature = "std")]
 #[test]
 fn maybe_pending() {
+    use futures::stream::{self, StreamExt, TryStreamExt};
+    use futures::io::AsyncBufReadExt;
+    use futures_test::io::AsyncReadTestExt;
+
+    use util::run;
+
+    macro_rules! run_next {
+        ($expr:expr) => {
+            run($expr.next()).unwrap().unwrap()
+        };
+    }
+
     let buf = stream::iter(vec![&b"12"[..], &b"\r"[..]])
         .map(Ok)
         .into_async_read()
-- 
2.25.0

