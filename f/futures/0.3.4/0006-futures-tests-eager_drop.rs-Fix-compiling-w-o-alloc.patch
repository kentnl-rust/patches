From 01c56705fc82e2747eb68f4695cf0c556b209e67 Mon Sep 17 00:00:00 2001
From: Kent Fredric <kentnl@gentoo.org>
Date: Sat, 14 Mar 2020 19:57:07 +1300
Subject: futures: tests/eager_drop.rs: Fix compiling w/o "alloc"

Some of these tests rely on the presence of the "alloc"
feature.

So I've reworked the imports to make ownership clearer, and reworked
some tests to localise shared code, and then `#[cfg()]` gated out
tests when their needed features aren't present.

These tests now pass with:

  cargo hack --each-feature \
    --skip bilock \
    --skip cfg-target-has-atomic \
    --skip read-initializer \
    test --test eager_drop

  cargo hack --feature-powerset \
    --skip bilock \
    --skip cfg-target-has-atomic \
    --skip read-initializer \
    test --test eager_drop

  cargo hack --features "unstable" \
    --each-feature \
    --skip "unstable" \
    test --test eager_drop

  cargo hack --features "unstable" \
    --feature-powerset \
    --skip unstable \
    test --test eager_drop
---
 tests/eager_drop.rs | 169 +++++++++++++++++++++++++-------------------
 1 file changed, 97 insertions(+), 72 deletions(-)

diff --git a/tests/eager_drop.rs b/tests/eager_drop.rs
index 674e401..bfb60a7 100644
--- a/tests/eager_drop.rs
+++ b/tests/eager_drop.rs
@@ -1,13 +1,9 @@
-use futures::channel::oneshot;
-use futures::future::{self, Future, FutureExt, TryFutureExt};
-use futures::task::{Context, Poll};
-use futures_test::future::FutureTestExt;
-use pin_utils::unsafe_pinned;
-use std::pin::Pin;
-use std::sync::mpsc;
-
 #[test]
 fn map_ok() {
+    use futures::future::{self, FutureExt, TryFutureExt};
+    use futures_test::future::FutureTestExt;
+    use std::sync::mpsc;
+
     // The closure given to `map_ok` should have been dropped by the time `map`
     // runs.
     let (tx1, rx1) = mpsc::channel::<()>();
@@ -26,6 +22,10 @@ fn map_ok() {
 
 #[test]
 fn map_err() {
+    use futures::future::{self, FutureExt, TryFutureExt};
+    use futures_test::future::FutureTestExt;
+    use std::sync::mpsc;
+
     // The closure given to `map_err` should have been dropped by the time `map`
     // runs.
     let (tx1, rx1) = mpsc::channel::<()>();
@@ -42,76 +42,101 @@ fn map_err() {
     rx2.recv().unwrap();
 }
 
-struct FutureData<F, T> {
-    _data: T,
-    future: F,
-}
+mod channelled {
+    use pin_utils::unsafe_pinned;
+    use futures::future::Future;
+    use std::pin::Pin;
+    use futures::task::{Context,Poll};
 
-impl<F, T> FutureData<F, T> {
-    unsafe_pinned!(future: F);
-}
-
-impl<F: Future, T: Send + 'static> Future for FutureData<F, T> {
-    type Output = F::Output;
-
-    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<F::Output> {
-        self.future().poll(cx)
+    struct FutureData<F, T> {
+        _data: T,
+        future: F,
     }
-}
-
-#[test]
-fn then_drops_eagerly() {
-    let (tx0, rx0) = oneshot::channel::<()>();
-    let (tx1, rx1) = mpsc::channel::<()>();
-    let (tx2, rx2) = mpsc::channel::<()>();
-
-    FutureData { _data: tx1, future: rx0.unwrap_or_else(|_| { panic!() }) }
-        .then(move |_| {
-            assert!(rx1.recv().is_err()); // tx1 should have been dropped
-            tx2.send(()).unwrap();
-            future::ready(())
-        })
-        .run_in_background();
-
-    assert_eq!(Err(mpsc::TryRecvError::Empty), rx2.try_recv());
-    tx0.send(()).unwrap();
-    rx2.recv().unwrap();
-}
 
-#[test]
-fn and_then_drops_eagerly() {
-    let (tx0, rx0) = oneshot::channel::<Result<(), ()>>();
-    let (tx1, rx1) = mpsc::channel::<()>();
-    let (tx2, rx2) = mpsc::channel::<()>();
+    impl<F, T> FutureData<F, T> {
+        unsafe_pinned!(future: F);
+    }
 
-    FutureData { _data: tx1, future: rx0.unwrap_or_else(|_| { panic!() }) }
-        .and_then(move |_| {
-            assert!(rx1.recv().is_err()); // tx1 should have been dropped
-            tx2.send(()).unwrap();
-            future::ready(Ok(()))
-        })
-        .run_in_background();
+    impl<F: Future, T: Send + 'static> Future for FutureData<F, T> {
+        type Output = F::Output;
 
-    assert_eq!(Err(mpsc::TryRecvError::Empty), rx2.try_recv());
-    tx0.send(Ok(())).unwrap();
-    rx2.recv().unwrap();
-}
+        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<F::Output> {
+            self.future().poll(cx)
+        }
+    }
 
-#[test]
-fn or_else_drops_eagerly() {
-    let (tx0, rx0) = oneshot::channel::<Result<(), ()>>();
-    let (tx1, rx1) = mpsc::channel::<()>();
-    let (tx2, rx2) = mpsc::channel::<()>();
+    #[cfg(feature = "alloc")]
+    #[test]
+    fn then_drops_eagerly() {
+        use futures::channel::oneshot;
+        use futures::future::{self, FutureExt, TryFutureExt};
+        use futures_test::future::FutureTestExt;
+        use std::sync::mpsc;
+
+        let (tx0, rx0) = oneshot::channel::<()>();
+        let (tx1, rx1) = mpsc::channel::<()>();
+        let (tx2, rx2) = mpsc::channel::<()>();
+
+        FutureData { _data: tx1, future: rx0.unwrap_or_else(|_| { panic!() }) }
+            .then(move |_| {
+                assert!(rx1.recv().is_err()); // tx1 should have been dropped
+                tx2.send(()).unwrap();
+                future::ready(())
+            })
+            .run_in_background();
+
+        assert_eq!(Err(mpsc::TryRecvError::Empty), rx2.try_recv());
+        tx0.send(()).unwrap();
+        rx2.recv().unwrap();
+    }
 
-    FutureData { _data: tx1, future: rx0.unwrap_or_else(|_| { panic!() }) }
-        .or_else(move |_| {
-            assert!(rx1.recv().is_err()); // tx1 should have been dropped
-            tx2.send(()).unwrap();
-            future::ready::<Result<(), ()>>(Ok(()))
-        })
-        .run_in_background();
+    #[cfg(feature = "alloc")]
+    #[test]
+    fn and_then_drops_eagerly() {
+        use futures::channel::oneshot;
+        use futures::future::{self, TryFutureExt};
+        use futures_test::future::FutureTestExt;
+        use std::sync::mpsc;
+
+        let (tx0, rx0) = oneshot::channel::<Result<(), ()>>();
+        let (tx1, rx1) = mpsc::channel::<()>();
+        let (tx2, rx2) = mpsc::channel::<()>();
+
+        FutureData { _data: tx1, future: rx0.unwrap_or_else(|_| { panic!() }) }
+            .and_then(move |_| {
+                assert!(rx1.recv().is_err()); // tx1 should have been dropped
+                tx2.send(()).unwrap();
+                future::ready(Ok(()))
+            })
+            .run_in_background();
+
+        assert_eq!(Err(mpsc::TryRecvError::Empty), rx2.try_recv());
+        tx0.send(Ok(())).unwrap();
+        rx2.recv().unwrap();
+    }
 
-    assert_eq!(Err(mpsc::TryRecvError::Empty), rx2.try_recv());
-    tx0.send(Err(())).unwrap();
-    rx2.recv().unwrap();
+    #[cfg(feature = "alloc")]
+    #[test]
+    fn or_else_drops_eagerly() {
+        use futures::channel::oneshot;
+        use futures::future::{self, TryFutureExt};
+        use futures_test::future::FutureTestExt;
+        use std::sync::mpsc;
+
+        let (tx0, rx0) = oneshot::channel::<Result<(), ()>>();
+        let (tx1, rx1) = mpsc::channel::<()>();
+        let (tx2, rx2) = mpsc::channel::<()>();
+
+        FutureData { _data: tx1, future: rx0.unwrap_or_else(|_| { panic!() }) }
+            .or_else(move |_| {
+                assert!(rx1.recv().is_err()); // tx1 should have been dropped
+                tx2.send(()).unwrap();
+                future::ready::<Result<(), ()>>(Ok(()))
+            })
+            .run_in_background();
+
+        assert_eq!(Err(mpsc::TryRecvError::Empty), rx2.try_recv());
+        tx0.send(Err(())).unwrap();
+        rx2.recv().unwrap();
+    }
 }
-- 
2.25.0

