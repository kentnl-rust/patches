From 5f3950a0d97aa794c5752d8bcec66d59e8c4a7f3 Mon Sep 17 00:00:00 2001
From: Kent Fredric <kentnl@gentoo.org>
Date: Sun, 15 Mar 2020 22:08:11 +1300
Subject: futures: tests/io_buf_reader.rs: Avoid compile failures w/o features

Various tests in this file need either or both "std" and "executor"

Imports and symbols pushed down as low as possible to make symbol
ownership more obvious, and also make gating tests against features
easier.

Tests appropriately gated with `#[cfg()]`

Tests now compile and pass where possible with:

  cargo hack --each-feature \
    --skip bilock \
    --skip cfg-target-has-atomic \
    --skip read-initializer \
    test --test io_buf_reader

  cargo hack --feature-powerset \
    --skip bilock \
    --skip cfg-target-has-atomic \
    --skip read-initializer \
    test --test io_buf_reader

  cargo hack --features "unstable" \
    --each-feature \
    --skip "unstable" \
    test --test io_buf_reader

  cargo hack --features "unstable" \
    --feature-powerset \
    --skip "unstable" \
    test --test io_buf_reader
---
 tests/io_buf_reader.rs | 287 ++++++++++++++++++++++++-----------------
 1 file changed, 167 insertions(+), 120 deletions(-)

diff --git a/tests/io_buf_reader.rs b/tests/io_buf_reader.rs
index a3d723a..07d934d 100644
--- a/tests/io_buf_reader.rs
+++ b/tests/io_buf_reader.rs
@@ -1,32 +1,10 @@
-use futures::executor::block_on;
-use futures::future::{Future, FutureExt};
-use futures::io::{
-    AsyncSeek, AsyncSeekExt, AsyncBufRead, AsyncBufReadExt, AsyncRead, AsyncReadExt,
-    AllowStdIo, BufReader, Cursor, SeekFrom,
-};
-use futures::task::{Context, Poll};
-use futures_test::task::noop_context;
-use std::cmp;
-use std::io;
-use std::pin::Pin;
-
-/// A dummy reader intended at testing short-reads propagation.
-struct ShortReader {
-    lengths: Vec<usize>,
-}
-
-impl io::Read for ShortReader {
-    fn read(&mut self, _: &mut [u8]) -> io::Result<usize> {
-        if self.lengths.is_empty() {
-            Ok(0)
-        } else {
-            Ok(self.lengths.remove(0))
-        }
-    }
-}
-
+#[cfg(any(feature = "std", feature = "executor"))]
 macro_rules! run_fill_buf {
     ($reader:expr) => {{
+        use futures_test::task::noop_context;
+        use futures::task::Poll;
+        use std::pin::Pin;
+
         let mut cx = noop_context();
         loop {
             if let Poll::Ready(x) = Pin::new(&mut $reader).poll_fill_buf(&mut cx) {
@@ -36,8 +14,83 @@ macro_rules! run_fill_buf {
     }};
 }
 
+#[cfg(any(feature = "std", feature = "executor"))]
+mod util {
+    use futures::future::Future;
+    pub fn run<F: Future + Unpin>(mut f: F) -> F::Output {
+        use futures_test::task::noop_context;
+        use futures::task::Poll;
+        use futures::future::FutureExt;
+
+        let mut cx = noop_context();
+        loop {
+            if let Poll::Ready(x) = f.poll_unpin(&mut cx) {
+                return x;
+            }
+        }
+    }
+}
+
+#[cfg(feature = "std")]
+mod maybe_pending {
+    use futures::task::{Context,Poll};
+    use std::{cmp,io};
+    use std::pin::Pin;
+    use futures::io::{AsyncRead,AsyncBufRead};
+
+    pub struct MaybePending<'a> {
+        inner: &'a [u8],
+        ready_read: bool,
+        ready_fill_buf: bool,
+    }
+
+    impl<'a> MaybePending<'a> {
+        pub fn new(inner: &'a [u8]) -> Self {
+            Self { inner, ready_read: false, ready_fill_buf: false }
+        }
+    }
+
+    impl AsyncRead for MaybePending<'_> {
+        fn poll_read(mut self: Pin<&mut Self>, cx: &mut Context<'_>, buf: &mut [u8])
+            -> Poll<io::Result<usize>>
+        {
+            if self.ready_read {
+                self.ready_read = false;
+                Pin::new(&mut self.inner).poll_read(cx, buf)
+            } else {
+                self.ready_read = true;
+                Poll::Pending
+            }
+        }
+    }
+
+    impl AsyncBufRead for MaybePending<'_> {
+        fn poll_fill_buf(mut self: Pin<&mut Self>, _: &mut Context<'_>)
+            -> Poll<io::Result<&[u8]>>
+        {
+            if self.ready_fill_buf {
+                self.ready_fill_buf = false;
+                if self.inner.is_empty() { return Poll::Ready(Ok(&[])) }
+                let len = cmp::min(2, self.inner.len());
+                Poll::Ready(Ok(&self.inner[0..len]))
+            } else {
+                self.ready_fill_buf = true;
+                Poll::Pending
+            }
+        }
+
+        fn consume(mut self: Pin<&mut Self>, amt: usize) {
+            self.inner = &self.inner[amt..];
+        }
+    }
+}
+
+#[cfg(feature = "executor")]
 #[test]
 fn test_buffered_reader() {
+    use futures::executor::block_on;
+    use futures::io::{AsyncReadExt, BufReader};
+
     let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];
     let mut reader = BufReader::with_capacity(2, inner);
 
@@ -73,8 +126,14 @@ fn test_buffered_reader() {
     assert_eq!(block_on(reader.read(&mut buf)).unwrap(), 0);
 }
 
+#[cfg(feature = "executor")]
 #[test]
 fn test_buffered_reader_seek() {
+    use futures::executor::block_on;
+    use futures::io::{AsyncSeekExt, AsyncBufRead, BufReader, Cursor, SeekFrom};
+    use std::pin::Pin;
+    use util::run;
+
     let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];
     let mut reader = BufReader::with_capacity(2, Cursor::new(inner));
 
@@ -88,8 +147,13 @@ fn test_buffered_reader_seek() {
     assert_eq!(block_on(reader.seek(SeekFrom::Current(-2))).ok(), Some(3));
 }
 
+#[cfg(feature = "executor")]
 #[test]
 fn test_buffered_reader_seek_underflow() {
+    use futures::executor::block_on;
+    use futures::io::{AsyncSeekExt, AsyncBufRead, AllowStdIo, BufReader, SeekFrom};
+    use std::io;
+
     // gimmick reader that yields its position modulo 256 for each byte
     struct PositionReader {
         pos: u64
@@ -134,8 +198,28 @@ fn test_buffered_reader_seek_underflow() {
     assert_eq!(reader.get_ref().get_ref().pos, expected);
 }
 
+#[cfg(feature = "executor")]
 #[test]
 fn test_short_reads() {
+    use futures::executor::block_on;
+    use futures::io::{AsyncReadExt, AllowStdIo, BufReader};
+    use std::io;
+
+    /// A dummy reader intended at testing short-reads propagation.
+    struct ShortReader {
+        lengths: Vec<usize>,
+    }
+
+    impl io::Read for ShortReader {
+        fn read(&mut self, _: &mut [u8]) -> io::Result<usize> {
+            if self.lengths.is_empty() {
+                Ok(0)
+            } else {
+                Ok(self.lengths.remove(0))
+            }
+        }
+    }
+
     let inner = ShortReader { lengths: vec![0, 1, 2, 0, 1, 0] };
     let mut reader = BufReader::new(AllowStdIo::new(inner));
     let mut buf = [0, 0];
@@ -148,63 +232,13 @@ fn test_short_reads() {
     assert_eq!(block_on(reader.read(&mut buf)).unwrap(), 0);
 }
 
-struct MaybePending<'a> {
-    inner: &'a [u8],
-    ready_read: bool,
-    ready_fill_buf: bool,
-}
-
-impl<'a> MaybePending<'a> {
-    fn new(inner: &'a [u8]) -> Self {
-        Self { inner, ready_read: false, ready_fill_buf: false }
-    }
-}
-
-impl AsyncRead for MaybePending<'_> {
-    fn poll_read(mut self: Pin<&mut Self>, cx: &mut Context<'_>, buf: &mut [u8])
-        -> Poll<io::Result<usize>>
-    {
-        if self.ready_read {
-            self.ready_read = false;
-            Pin::new(&mut self.inner).poll_read(cx, buf)
-        } else {
-            self.ready_read = true;
-            Poll::Pending
-        }
-    }
-}
-
-impl AsyncBufRead for MaybePending<'_> {
-    fn poll_fill_buf(mut self: Pin<&mut Self>, _: &mut Context<'_>)
-        -> Poll<io::Result<&[u8]>>
-    {
-        if self.ready_fill_buf {
-            self.ready_fill_buf = false;
-            if self.inner.is_empty() { return Poll::Ready(Ok(&[])) }
-            let len = cmp::min(2, self.inner.len());
-            Poll::Ready(Ok(&self.inner[0..len]))
-        } else {
-            self.ready_fill_buf = true;
-            Poll::Pending
-        }
-    }
-
-    fn consume(mut self: Pin<&mut Self>, amt: usize) {
-        self.inner = &self.inner[amt..];
-    }
-}
-
-fn run<F: Future + Unpin>(mut f: F) -> F::Output {
-    let mut cx = noop_context();
-    loop {
-        if let Poll::Ready(x) = f.poll_unpin(&mut cx) {
-            return x;
-        }
-    }
-}
-
+#[cfg(feature = "std")]
 #[test]
 fn maybe_pending() {
+    use futures::io::{AsyncReadExt, BufReader};
+    use util::run;
+    use maybe_pending::MaybePending;
+
     let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];
     let mut reader = BufReader::with_capacity(2, MaybePending::new(inner));
 
@@ -240,8 +274,13 @@ fn maybe_pending() {
     assert_eq!(run(reader.read(&mut buf)).unwrap(), 0);
 }
 
+#[cfg(feature = "std")]
 #[test]
 fn maybe_pending_buf_read() {
+    use futures::io::{AsyncBufReadExt, BufReader};
+    use util::run;
+    use maybe_pending::MaybePending;
+
     let inner = MaybePending::new(&[0, 1, 2, 3, 1, 0]);
     let mut reader = BufReader::with_capacity(2, inner);
     let mut v = Vec::new();
@@ -258,55 +297,63 @@ fn maybe_pending_buf_read() {
     assert_eq!(v, []);
 }
 
-struct MaybePendingSeek<'a> {
-    inner: Cursor<&'a [u8]>,
-    ready: bool,
-}
-
-impl<'a> MaybePendingSeek<'a> {
-    fn new(inner: &'a [u8]) -> Self {
-        Self { inner: Cursor::new(inner), ready: true }
+// https://github.com/rust-lang/futures-rs/pull/1573#discussion_r281162309
+#[cfg(feature = "std")]
+#[test]
+fn maybe_pending_seek() {
+    use futures::io::{AsyncBufRead, AsyncSeek, AsyncSeekExt, AsyncRead, BufReader,
+        Cursor, SeekFrom
+    };
+    use futures::task::{Context,Poll};
+    use std::io;
+    use std::pin::Pin;
+    use util::run;
+    pub struct MaybePendingSeek<'a> {
+        inner: Cursor<&'a [u8]>,
+        ready: bool,
     }
-}
 
-impl AsyncRead for MaybePendingSeek<'_> {
-    fn poll_read(mut self: Pin<&mut Self>, cx: &mut Context<'_>, buf: &mut [u8])
-        -> Poll<io::Result<usize>>
-    {
-        Pin::new(&mut self.inner).poll_read(cx, buf)
+    impl<'a> MaybePendingSeek<'a> {
+        pub fn new(inner: &'a [u8]) -> Self {
+            Self { inner: Cursor::new(inner), ready: true }
+        }
     }
-}
 
-impl AsyncBufRead for MaybePendingSeek<'_> {
-    fn poll_fill_buf(mut self: Pin<&mut Self>, cx: &mut Context<'_>)
-        -> Poll<io::Result<&[u8]>>
-    {
-        let this: *mut Self = &mut *self as *mut _;
-        Pin::new(&mut unsafe { &mut *this }.inner).poll_fill_buf(cx)
+    impl AsyncRead for MaybePendingSeek<'_> {
+        fn poll_read(mut self: Pin<&mut Self>, cx: &mut Context<'_>, buf: &mut [u8])
+            -> Poll<io::Result<usize>>
+        {
+            Pin::new(&mut self.inner).poll_read(cx, buf)
+        }
     }
 
-    fn consume(mut self: Pin<&mut Self>, amt: usize) {
-        Pin::new(&mut self.inner).consume(amt)
+    impl AsyncBufRead for MaybePendingSeek<'_> {
+        fn poll_fill_buf(mut self: Pin<&mut Self>, cx: &mut Context<'_>)
+            -> Poll<io::Result<&[u8]>>
+        {
+            let this: *mut Self = &mut *self as *mut _;
+            Pin::new(&mut unsafe { &mut *this }.inner).poll_fill_buf(cx)
+        }
+
+        fn consume(mut self: Pin<&mut Self>, amt: usize) {
+            Pin::new(&mut self.inner).consume(amt)
+        }
     }
-}
 
-impl AsyncSeek for MaybePendingSeek<'_> {
-    fn poll_seek(mut self: Pin<&mut Self>, cx: &mut Context<'_>, pos: SeekFrom)
-        -> Poll<io::Result<u64>>
-    {
-        if self.ready {
-            self.ready = false;
-            Pin::new(&mut self.inner).poll_seek(cx, pos)
-        } else {
-            self.ready = true;
-            Poll::Pending
+    impl AsyncSeek for MaybePendingSeek<'_> {
+        fn poll_seek(mut self: Pin<&mut Self>, cx: &mut Context<'_>, pos: SeekFrom)
+            -> Poll<io::Result<u64>>
+        {
+            if self.ready {
+                self.ready = false;
+                Pin::new(&mut self.inner).poll_seek(cx, pos)
+            } else {
+                self.ready = true;
+                Poll::Pending
+            }
         }
     }
-}
 
-// https://github.com/rust-lang/futures-rs/pull/1573#discussion_r281162309
-#[test]
-fn maybe_pending_seek() {
     let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];
     let mut reader = BufReader::with_capacity(2, MaybePendingSeek::new(inner));
 
-- 
2.25.0

