From 18e4b212bd3a0f9478446319739b27b86127e0fb Mon Sep 17 00:00:00 2001
From: Kent Fredric <kentnl@gentoo.org>
Date: Mon, 16 Mar 2020 08:50:04 +1300
Subject: futures: tests/io_read.rs: Don't break w/o "std"

- Symbols/Imports pushed down / localised
- Tests gated with cfg()
- Tests now build and pass with all valid feature combinations

See previous commits for details and rationale
---
 tests/io_read.rs | 58 ++++++++++++++++++++++++++++++++----------------
 1 file changed, 39 insertions(+), 19 deletions(-)

diff --git a/tests/io_read.rs b/tests/io_read.rs
index f99c4ed..ba68fcc 100644
--- a/tests/io_read.rs
+++ b/tests/io_read.rs
@@ -1,33 +1,44 @@
-use futures::io::AsyncRead;
-use futures_test::task::panic_context;
-use std::io;
-use std::pin::Pin;
-use std::task::{Context, Poll};
+#[cfg(feature = "std")]
+mod mock_reader {
+    use futures::io::AsyncRead;
+    use std::io;
+    use std::pin::Pin;
+    use std::task::{Context, Poll};
 
-struct MockReader {
-    fun: Box<dyn FnMut(&mut [u8]) -> Poll<io::Result<usize>>>,
-}
+    pub struct MockReader {
+        fun: Box<dyn FnMut(&mut [u8]) -> Poll<io::Result<usize>>>,
+    }
 
-impl MockReader {
-    pub fn new(fun: impl FnMut(&mut [u8]) -> Poll<io::Result<usize>> + 'static) -> Self {
-        MockReader { fun: Box::new(fun) }
+    impl MockReader {
+        pub fn new(fun: impl FnMut(&mut [u8]) -> Poll<io::Result<usize>> + 'static) -> Self {
+            MockReader { fun: Box::new(fun) }
+        }
     }
-}
 
-impl AsyncRead for MockReader {
-    fn poll_read(
-        self: Pin<&mut Self>,
-        _cx: &mut Context<'_>,
-        buf: &mut [u8]
-    ) -> Poll<io::Result<usize>> {
-        (self.get_mut().fun)(buf)
+    impl AsyncRead for MockReader {
+        fn poll_read(
+            self: Pin<&mut Self>,
+            _cx: &mut Context<'_>,
+            buf: &mut [u8]
+        ) -> Poll<io::Result<usize>> {
+            (self.get_mut().fun)(buf)
+        }
     }
 }
 
 /// Verifies that the default implementation of `poll_read_vectored`
 /// calls `poll_read` with an empty slice if no buffers are provided.
+#[cfg(feature = "std")]
 #[test]
 fn read_vectored_no_buffers() {
+    use futures::io::AsyncRead;
+    use futures_test::task::panic_context;
+    use std::io;
+    use std::pin::Pin;
+    use std::task::Poll;
+
+    use mock_reader::MockReader;
+
     let mut reader = MockReader::new(|buf| {
         assert_eq!(buf, b"");
         Err(io::ErrorKind::BrokenPipe.into()).into()
@@ -42,8 +53,17 @@ fn read_vectored_no_buffers() {
 
 /// Verifies that the default implementation of `poll_read_vectored`
 /// calls `poll_read` with the first non-empty buffer.
+#[cfg(feature = "std")]
 #[test]
 fn read_vectored_first_non_empty() {
+    use futures::io::AsyncRead;
+    use futures_test::task::panic_context;
+    use std::io;
+    use std::pin::Pin;
+    use std::task::Poll;
+
+    use mock_reader::MockReader;
+
     let mut reader = MockReader::new(|buf| {
         assert_eq!(buf.len(), 4);
         buf.copy_from_slice(b"four");
-- 
2.25.0

